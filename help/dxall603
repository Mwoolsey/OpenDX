#!F-adobe-helvetica-medium-r-normal--18*
#!N 
#!CSeaGreen #!N  #!Rnorsha Normals and Shading #!N #!EC #!N #!N Another 
Field component used in Data Explorer is the "normals" component.  #!F-adobe-times-medium-i-normal--18*   
normals #!EF are unit vectors that tell the computer graphics program 
and the image renderer which direction is "up" or "out." Several 
tools, like Isosurface, automatically create a normals component so you do 
not have to calculate these numbers yourself. #!N #!N There are 
two types of normals provided in Data Explorer, "connections normals" and 
"positions normals." Connection-based normals are vectors perpendicular to each connection element 
on the surface. They are created by the Normals module when 
you set the  #!F-adobe-times-bold-r-normal--18*   method #!EF input to "connections." The resulting 
surface reveals the underlying polygonal grid structure of your sample grid. 
Frequently, this is a valuable way to show your data, as 
any observer can then see the grid resolution directly. At the 
same time, this surface can be colored or color mapped either 
by connection-dependent or position-dependent data. #!N #!N The other type of 
normals are created by the Normals module when you enter "positions" 
as the  #!F-adobe-times-bold-r-normal--18*   method #!EF (this is the default method, in 
fact). In this case, the surface will be much smoother in 
appearance yielding a more aesthetically pleasing surface at the expense of 
being able to directly perceive the grid resolution. It is sometimes 
less confusing to use position normals in place of connection normals 
because the object is less "busy" looking. You must be the 
judge of what is the appropriate way to observe your own 
data. You can also show your data first with connection normals, 
to illustrate the sample resolution, then switch to position normals in 
order to better show some other aspect of your data. #!N 
#!N Normals are used by various modules in Data Explorer. One 
use of this information is that it is required by the 
image renderer (the Image, Render, and Display modules all incorporate the 
image renderer) to calculate the amount and direction of light falling 
on an object's surface (we will discuss this in more detail 
below). Rubbersheet assumes that the input grid or line is flat 
(if there is no "normals" component in the input Field) and 
projects the values in a perpendicular direction. However, you may wish 
to create your own normals or modify an existing "normals" component 
(using the Compute module, for example) and Rubbersheet will then use 
the modified normals to control the direction of projection of the 
surface or line. After performing the Rubbersheet projection, you may want 
to insert another Normals module. This will take the projected object 
and generate real surface normals before rendering, resulting in better-looking shading 
on you projected surface. See  #!Lrubbers,dxall930 h RubberSheet  #!EL  in IBM Visualization Data Explorer 
User's Reference for a full description. #!N #!N Isosurface will also 
generate normals automatically; to do so, Isosurface either calculates or reads 
the previously calculated Field gradient (depending on the setting of the 
 #!F-adobe-times-bold-r-normal--18*   gradient #!EF input flag). Therefore, the normals generated by Isosurface 
are not necessarily perpendicular to the connection elements generated by the 
Isosurface module, but better indicate the actual Field direction than simple 
perpendicular normals. #!N #!N If you wish to understand Normals better, 
you can use the Glyph module to visualize them. First use 
Mark to mark the "normals" component. This makes Data Explorer treat 
the "normals" component as if it were the "data" component. Then, 
Glyph the Field. Finally, Unmark the  #!F-adobe-times-bold-r-normal--18*   normals #!EF to restore 
the previous  #!F-adobe-times-bold-r-normal--18*   data #!EF component to its proper place. By 
showing the normals as vector glyphs in conjunction with a surface, 
you should be able to see how different modules, like Rubbersheet 
and Isosurface, deal with these vectors. #!N #!N Normals are also 
useful in helping you determine the "inside" and "outside" of an 
object. In addition to a "colors" component, which holds the color-mapped 
information for each data point in a Field, you can specify 
a "front colors" and a "back colors" component. Which is front 
and which is back is determined by the direction of the 
normal for that vertex (position normals) or polygon (connection normals). By 
setting different colors for the inside and outside of a complicated 
object, you may be able to understand its shape better. This 
technique can also be helpful when you are trying to convert 
a connection list like a finite element mesh into Data Explorer 
form. If you accidentally describe the "winding" (rhymes with "binding") of 
a polygonal face in the wrong order, the normal for that 
face will point in the wrong direction. Setting "back colors" to 
red and "front colors" to white will clearly indicate which faces 
are pointing the wrong way. #!N #!N The Shade module employs 
the "normals" component; it will make a "normals" component if it 
does not already exist. Shade allows you to set up the 
lighting of your objects to make them more "realistic" in appearance. 
That is to say, when we observe a 3-dimensional object, the 
way light falls on the object is an important cue to 
our eyes that helps us understand the shape of the object. 
We expect the surfaces of the object that are generally facing 
a light source to be brighter than those that face away. 
Data Explorer, like other computer graphics rendering programs, takes the normal 
directions of the object surfaces into account when calculating the angle 
between the object, the light(s) in the scene, and the viewer's 
eye point (the camera in the scene). #!N #!N In the 
real world, different materials react to incident light differently. For example, 
many metals scatter light causing the "specular" reflection to be more 
spread out than it is on shiny plastic surfaces. The specular 
highlight is the highlight (many types of cloth and other dull 
surfaces have no specular brightest spot on a shiny surface. Think 
of how the sun sometimes bounces off the hood of your 
car at just the right angle and makes a bright sharp 
reflection. By adjusting the "specular" and "shininess" inputs to the Shade 
module, you can make your object appear more metallic or more 
plastic. If you turn the specular value all the way to 
0.0, you eliminate the specular reflection). This can be important if 
you are trying to make sense of color-mapped data, since the 
specular highlight will be a bright white area on the surface 
of the object (assuming the incident light color is white). This 
white spot or area could confuse a viewer who is trying 
to interpret the color mapping of the data. #!N #!N Two 
other inputs in the Shade module (  #!F-adobe-times-bold-r-normal--18*   diffuse #!EF and 
 #!F-adobe-times-bold-r-normal--18*   ambient #!EF ) are also used by Data Explorer when 
it lights an object. Diffuse light is light emanating from a 
direct light source, like the default Light in any Data Explorer 
network, or from Light modules you place in your network. Think 
of diffuse light as the light coming from a light bulb 
and falling on an object surface, like a light in your 
office shining directly on your desk. This property is called "diffuse" 
because it represents the way light bounces off a surface, depending 
on the "roughness" of the surface. The rougher the surface, the 
more the light rays are scattered ("diffused"). An extremely smooth surface 
tends to bounce light more uniformly to the eye. Ambient light 
is light that is indirect: for example, daylight coming through a 
window, bouncing off white walls and then impinging on your desk. 
Data Explorer automatically places an AmbientLight value in any scene, or 
you can override this value by placing your own AmbientLight module 
in a network. Ambient light is best thought of as a 
sort of "glow" emanating from a non-point source of light and 
therefore illuminating even the parts of objects that face away from 
the point light sources in a scene. If you remove the 
ambient light, the apparent "shadows" on an object lit only by 
a point source of light are much harsher. #!N #!N Like 
Normals, the Shade module can light an object in two fundamentally 
different ways. If you enter "smooth" in the  #!F-adobe-times-bold-r-normal--18*   how #!EF 
input to Shade, the surface will appear smoothly rounded (assuming it 
is not completely flat to start with). This is equivalent to 
setting "positions" in a Normals module. Shade will, if necessary, create 
position normals, then light the object accordingly. Any point on a 
connection between positions will be lit by calculating an interpolated normal 
value between the position normals. If you choose  #!F-adobe-times-bold-r-normal--18*   faceted #!EF 
in Shade, the effect is the same as selecting "connections" in 
the Normals module. In this case, each connection element has one 
normal direction over the entire face. As a result, every point 
on a connection element reflects light exactly the same way. The 
image that you see will thus show faceted polygons. Once again, 
while this may make the object look less "realistic," it does 
more accurately reflect the sampling resolution of your data and may 
therefore be a more desirable image to show other viewers. #!N 
#!N #!N  #!F-adobe-times-medium-i-normal--18*   Next Topic #!EF #!N #!N  #!Lplohis,dxall604 h Plots and Histograms  #!EL  #!N  #!F-adobe-times-medium-i-normal--18*   
#!N 
