//
// time: Tue May 14 16:39:37 1996
//
// version: 3.0.0 (format), 3.2.0 (DX Beta)
//
//
// MODULE main
//
// comment: This is the Data Explorer (DX) object viewer. It provides
// comment: the means to interactively explorer a 3-dimensional object
// comment: that was, in general, created by DX.  You can use the left
// comment: and right mouse buttons to manipulate the object in the
// comment: following modes:
// comment: 
// comment: Mode          Hot-key    Left mouse            Right mouse
// comment: Rotate         Ctrl-R      Trackball rotate    Rotate image plane
// comment: Pan/Zoom   Ctrl-G      Zoom in                 Zpom out
// comment: Navigate     Ctrl-N      Move towards       Move away
// comment: 
// comment: Use the File menu to Save and Print Images.  
// comment: 
// comment: Use the Execute menu to control executions (which 
// comment: generate new pictures in response to input changes).  
// comment: When the view  comes up it is initially in "execute-on-
// comment: change".  This causes a  new picture to generated 
// comment: for each mouse event.  The Sequencer option can
// comment:  be used when the imported object isa series or group
// comment:  object.  In general, use of this option should not be 
// comment: necessary, as the Sequencer window will come up 
// comment: automatically, when Importing a series or group object.
// comment: 
// comment: Use the Options menu to control various aspects of the 
// comment: displayed image, interaction mode, including background
// comment: color,  and rendering mode (hardware or software).
// workspace: width = 1584, height = 750
// layout: snap = 0, width = 50, height = 50, align = UL
//
macro main(
) -> (
) {
    // 
    // node Import[1]: x = 134, y = 3, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "/usr/lpp/dx/samples/data/npp"
    //
main_Import_1_out_1 = 
    Import(
    main_Import_1_in_1,
    main_Import_1_in_2,
    main_Import_1_in_3,
    main_Import_1_in_4,
    main_Import_1_in_5,
    main_Import_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[4]: x = 130, y = 81, inputs = 1, label = ImportObject
    //
ImportObject = main_Import_1_out_1;
    // 
    // node Receiver[4]: x = 838, y = 19, inputs = 1, label = ImportObject
    //
main_Receiver_4_out_1 = ImportObject;
    // 
    // node AutoColor[1]: x = 819, y = 217, inputs = 10, label = AutoColor
    //
main_AutoColor_1_out_1,
main_AutoColor_1_out_2 = 
    AutoColor(
    main_Receiver_4_out_1,
    main_AutoColor_1_in_2,
    main_AutoColor_1_in_3,
    main_AutoColor_1_in_4,
    main_AutoColor_1_in_5,
    main_AutoColor_1_in_6,
    main_AutoColor_1_in_7,
    main_AutoColor_1_in_8,
    main_AutoColor_1_in_9,
    main_AutoColor_1_in_10
    ) [instance: 1, cache: 1];
    // 
    // node Inquire[2]: x = 723, y = 123, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is group + 1"
    // input[3]: defaulting = 1, visible = 1, type = 32, value = "colors"
    //
main_Inquire_2_out_1 = 
    Inquire(
    main_Receiver_4_out_1,
    main_Inquire_2_in_2,
    main_Inquire_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Select[1]: x = 807, y = 124, inputs = 3, label = Select
    //
main_Select_1_out_1 = 
    Select(
    main_Receiver_4_out_1,
    main_Select_1_in_2,
    main_Select_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Switch[2]: x = 666, y = 203, inputs = 3, label = Switch
    //
main_Switch_2_out_1 = 
    Switch(
    main_Inquire_2_out_1,
    main_Receiver_4_out_1,
    main_Select_1_out_1
    ) [instance: 2, cache: 1];
    // 
    // node MapToPlane[1]: x = 1021, y = 346, inputs = 3, label = MapToPlane
    //
main_MapToPlane_1_out_1 = 
    MapToPlane(
    main_Switch_2_out_1,
    main_MapToPlane_1_in_2,
    main_MapToPlane_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node AutoColor[2]: x = 1025, y = 423, inputs = 10, label = AutoColor
    //
main_AutoColor_2_out_1,
main_AutoColor_2_out_2 = 
    AutoColor(
    main_MapToPlane_1_out_1,
    main_AutoColor_2_in_2,
    main_AutoColor_2_in_3,
    main_AutoColor_2_in_4,
    main_AutoColor_2_in_5,
    main_AutoColor_2_in_6,
    main_AutoColor_2_in_7,
    main_AutoColor_2_in_8,
    main_AutoColor_2_in_9,
    main_AutoColor_2_in_10
    ) [instance: 2, cache: 1];
    // 
    // node Inquire[10]: x = 940, y = 126, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is vector +1"
    //
main_Inquire_10_out_1 = 
    Inquire(
    main_Switch_2_out_1,
    main_Inquire_10_in_2,
    main_Inquire_10_in_3
    ) [instance: 10, cache: 1];
    // 
    // node Compute[4]: x = 1031, y = 127, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "mag($0)"
    // expression: value = mag(a)
    // name[2]: value = a
    //
main_Compute_4_out_1 = 
    Compute(
    main_Compute_4_in_1,
    main_Switch_2_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Switch[6]: x = 985, y = 211, inputs = 3, label = Switch
    //
main_Switch_6_out_1 = 
    Switch(
    main_Inquire_10_out_1,
    main_Switch_2_out_1,
    main_Compute_4_out_1
    ) [instance: 6, cache: 1];
    // 
    // node Isosurface[1]: x = 940, y = 347, inputs = 6, label = Isosurface
    //
main_Isosurface_1_out_1 = 
    Isosurface(
    main_Switch_6_out_1,
    main_Isosurface_1_in_2,
    main_Isosurface_1_in_3,
    main_Isosurface_1_in_4,
    main_Isosurface_1_in_5,
    main_Isosurface_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Color[1]: x = 936, y = 420, inputs = 5, label = Color
    // input[2]: defaulting = 1, visible = 1, type = 8, value = [.3]
    // input[3]: defaulting = 0, visible = 1, type = 5, value = .3
    //
main_Color_1_out_1 = 
    Color(
    main_Isosurface_1_out_1,
    main_Color_1_in_2,
    main_Color_1_in_3,
    main_Color_1_in_4,
    main_Color_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Collect[1]: x = 1010, y = 513, inputs = 2, label = Collect
    //
main_Collect_1_out_1 = 
    Collect(
    main_Color_1_out_1,
    main_AutoColor_2_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Receiver[5]: x = 1278, y = 12, inputs = 1, label = ImportObject
    //
main_Receiver_5_out_1 = ImportObject;
    // 
    // node Inquire[6]: x = 1236, y = 166, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is field"
    //
main_Inquire_6_out_1 = 
    Inquire(
    main_Receiver_5_out_1,
    main_Inquire_6_in_2,
    main_Inquire_6_in_3
    ) [instance: 6, cache: 1];
    // 
    // node Inquire[3]: x = 1328, y = 166, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is 2D grid connections"
    //
main_Inquire_3_out_1 = 
    Inquire(
    main_Receiver_5_out_1,
    main_Inquire_3_in_2,
    main_Inquire_3_in_3
    ) [instance: 3, cache: 1];
    // 
    // node Inquire[4]: x = 1420, y = 165, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is 2D positions"
    //
main_Inquire_4_out_1 = 
    Inquire(
    main_Receiver_5_out_1,
    main_Inquire_4_in_2,
    main_Inquire_4_in_3
    ) [instance: 4, cache: 1];
    // 
    // node Inquire[5]: x = 1512, y = 165, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is regular positions"
    //
main_Inquire_5_out_1 = 
    Inquire(
    main_Receiver_5_out_1,
    main_Inquire_5_in_2,
    main_Inquire_5_in_3
    ) [instance: 5, cache: 1];
    // 
    // node Compute[1]: x = 1348, y = 318, inputs = 5, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 && $1 && $2 && $3"
    // expression: value = a && b && c && d
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    // name[5]: value = d
    //
main_Compute_1_out_1 = 
    Compute(
    main_Compute_1_in_1,
    main_Inquire_6_out_1,
    main_Inquire_3_out_1,
    main_Inquire_4_out_1,
    main_Inquire_5_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[3]: x = 1345, y = 519, inputs = 1, label = IsImage
    //
IsImage = main_Compute_1_out_1;
    // 
    // node Receiver[3]: x = 40, y = 152, inputs = 1, label = IsImage
    //
main_Receiver_3_out_1 = IsImage;
    // 
    // node Compute[2]: x = 62, y = 243, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 + 1"
    // expression: value = a + 1
    // name[2]: value = a
    //
main_Compute_2_out_1 = 
    Compute(
    main_Compute_2_in_1,
    main_Receiver_3_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Receiver[6]: x = 1079, y = 20, inputs = 1, label = ImportObject
    //
main_Receiver_6_out_1 = ImportObject;
    // 
    // node Inquire[7]: x = 1135, y = 235, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is series"
    //
main_Inquire_7_out_1 = 
    Inquire(
    main_Receiver_6_out_1,
    main_Inquire_7_in_2,
    main_Inquire_7_in_3
    ) [instance: 7, cache: 1];
    // 
    // node Transmitter[5]: x = 1101, y = 493, inputs = 1, label = IsSeries
    //
IsSeries = main_Inquire_7_out_1;
    // 
    // node Receiver[7]: x = 413, y = 12, inputs = 1, label = IsSeries
    //
main_Receiver_7_out_1 = IsSeries;
    // 
    // node Compute[3]: x = 450, y = 143, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 + 1"
    // expression: value = a + 1
    // name[2]: value = a
    //
main_Compute_3_out_1 = 
    Compute(
    main_Compute_3_in_1,
    main_Receiver_7_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Inquire[9]: x = 917, y = 512, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is volume +1"
    //
main_Inquire_9_out_1 = 
    Inquire(
    main_Switch_2_out_1,
    main_Inquire_9_in_2,
    main_Inquire_9_in_3
    ) [instance: 9, cache: 1];
    // 
    // node Inquire[1]: x = 752, y = 309, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "has component + 1"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "colors"
    //
main_Inquire_1_out_1 = 
    Inquire(
    main_Switch_2_out_1,
    main_Inquire_1_in_2,
    main_Inquire_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Switch[1]: x = 822, y = 387, inputs = 3, label = Switch
    //
main_Switch_1_out_1 = 
    Switch(
    main_Inquire_1_out_1,
    main_AutoColor_1_out_1,
    main_Receiver_4_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Switch[5]: x = 980, y = 606, inputs = 3, label = Switch
    //
main_Switch_5_out_1 = 
    Switch(
    main_Inquire_9_out_1,
    main_Switch_1_out_1,
    main_Collect_1_out_1
    ) [instance: 5, cache: 1];
    // 
    // node Transmitter[1]: x = 961, y = 688, inputs = 1, label = ColoredObject
    //
ColoredObject = main_Switch_5_out_1;
    // 
    // node Receiver[1]: x = 526, y = 19, inputs = 1, label = ColoredObject
    //
main_Receiver_1_out_1 = ColoredObject;
    // 
    // node Inquire[8]: x = 536, y = 141, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "member count - 1"
    //
main_Inquire_8_out_1 = 
    Inquire(
    main_Receiver_1_out_1,
    main_Inquire_8_in_2,
    main_Inquire_8_in_3
    ) [instance: 8, cache: 1];
    // 
    // node Sequencer[1]: x = 541, y = 219, inputs = 7, label = Sequencer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Sequencer_1"
    // input[4]: defaulting = 0, visible = 1, type = 1, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 1, value = 100
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[7]: defaulting = 0, visible = 0, type = 16777217, value = { 1 100 1 1 100 1 }
    // vcr[1]: min = 1, max = 100, beg = 1, end = 100, cur = 1, inc = 1, loop = off, step = off, pal = off
    // window: position = (0.0508,0.0020), size = 0.2188x0.0781
    //
    main_Sequencer_1_in_3 = @frame;
main_Sequencer_1_out_1[cache: 2] = 
    Sequencer(
    main_Sequencer_1_in_1,
    main_Sequencer_1_in_2,
    main_Sequencer_1_in_3,
    main_Sequencer_1_in_4,
    main_Inquire_8_out_1,
    main_Sequencer_1_in_6,
    main_Sequencer_1_in_7
    ) [instance: 1, cache: 1];
    // 
    // node Select[2]: x = 555, y = 309, inputs = 3, label = Select
    //
main_Select_2_out_1 = 
    Select(
    main_Receiver_1_out_1,
    main_Sequencer_1_out_1,
    main_Select_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Switch[4]: x = 512, y = 405, inputs = 3, label = Switch
    //
main_Switch_4_out_1 = 
    Switch(
    main_Compute_3_out_1,
    main_Receiver_1_out_1,
    main_Select_2_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[6]: x = 489, y = 496, inputs = 1, label = SingleFrameObject
    //
SingleFrameObject = main_Switch_4_out_1;
    // 
    // node Receiver[8]: x = 159, y = 156, inputs = 1, label = SingleFrameObject
    //
main_Receiver_8_out_1 = SingleFrameObject;
    // 
    // node Route[1]: x = 150, y = 312, inputs = 2, outputs = 2, label = Route
    //
main_Route_1_out_1,
main_Route_1_out_2 = 
    Route(
    main_Compute_2_out_1,
    main_Receiver_8_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Display[1]: x = 253, y = 467, inputs = 8, label = Display
    // title: value = DX Object Viewer
    // depth: value = 8
    // window: position = (0.0336,0.4883), size = 0.2844x0.3613
    //
    Display(
    main_Route_1_out_2,
    main_Display_1_in_2,
    main_Display_1_in_3,
    main_Display_1_in_4,
    main_Display_1_in_5,
    main_Display_1_in_6,
    main_Display_1_in_7,
    main_Display_1_in_8
    ) [instance: 1, cache: 1];
    // 
    // node Reset[1]: x = 167, y = 453, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_1_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 1
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 1
    // toggle : 1
    //
    // 
    // node Image[5]: x = 97, y = 482, inputs = 48, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Image_5"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[21]: visible = 1
    // depth: value = 8
    // internal caching: 1
    //
main_Image_5_out_1,
main_Image_5_out_2 = 
    Image(
    main_Image_5_in_1,
    main_Route_1_out_1,
    main_Image_5_in_3,
    main_Image_5_in_4,
    main_Image_5_in_5,
    main_Image_5_in_6,
    main_Image_5_in_7,
    main_Image_5_in_8,
    main_Image_5_in_9,
    main_Image_5_in_10,
    main_Image_5_in_11,
    main_Image_5_in_12,
    main_Image_5_in_13,
    main_Image_5_in_14,
    main_Image_5_in_15,
    main_Image_5_in_16,
    main_Image_5_in_17,
    main_Image_5_in_18,
    main_Image_5_in_19,
    main_Image_5_in_20,
    main_Reset_1_out_1,
    main_Image_5_in_22,
    main_Image_5_in_23,
    main_Image_5_in_24,
    main_Image_5_in_25,
    main_Image_5_in_26,
    main_Image_5_in_27,
    main_Image_5_in_28,
    main_Image_5_in_29,
    main_Image_5_in_30,
    main_Image_5_in_31,
    main_Image_5_in_32,
    main_Image_5_in_33,
    main_Image_5_in_34,
    main_Image_5_in_35,
    main_Image_5_in_36,
    main_Image_5_in_37,
    main_Image_5_in_38,
    main_Image_5_in_39,
    main_Image_5_in_40,
    main_Image_5_in_41,
    main_Image_5_in_42,
    main_Image_5_in_43,
    main_Image_5_in_44,
    main_Image_5_in_45,
    main_Image_5_in_46,
    main_Image_5_in_47,
    main_Image_5_in_48
    ) [instance: 5, cache: 1];
    // 
    // node ManageSequencer[1]: x = 379, y = 328, inputs = 1, label = ManageSequencer
    // input[1]: defaulting = 1, visible = 1, type = 3, value = 1
    //
    ManageSequencer(
    main_Receiver_7_out_1
    ) [instance: 1, cache: 1];
// network: end of macro body
CacheScene("Image_5", main_Image_5_out_1, main_Image_5_out_2);
}
main_Import_1_in_1 = "/usr/lpp/dx/samples/data/npp";
main_Import_1_in_2 = NULL;
main_Import_1_in_3 = NULL;
main_Import_1_in_4 = NULL;
main_Import_1_in_5 = NULL;
main_Import_1_in_6 = NULL;
main_Import_1_out_1 = NULL;
main_Transmitter_4_out_1 = NULL;
main_Receiver_4_out_1 = NULL;
main_AutoColor_1_in_2 = NULL;
main_AutoColor_1_in_3 = NULL;
main_AutoColor_1_in_4 = NULL;
main_AutoColor_1_in_5 = NULL;
main_AutoColor_1_in_6 = NULL;
main_AutoColor_1_in_7 = NULL;
main_AutoColor_1_in_8 = NULL;
main_AutoColor_1_in_9 = NULL;
main_AutoColor_1_in_10 = NULL;
main_AutoColor_1_out_1 = NULL;
main_Inquire_2_in_2 = "is group + 1";
main_Inquire_2_in_3 = NULL;
main_Inquire_2_out_1 = NULL;
main_Select_1_in_2 = NULL;
main_Select_1_in_3 = NULL;
main_Select_1_out_1 = NULL;
main_Switch_2_out_1 = NULL;
main_MapToPlane_1_in_2 = NULL;
main_MapToPlane_1_in_3 = NULL;
main_MapToPlane_1_out_1 = NULL;
main_AutoColor_2_in_2 = NULL;
main_AutoColor_2_in_3 = NULL;
main_AutoColor_2_in_4 = NULL;
main_AutoColor_2_in_5 = NULL;
main_AutoColor_2_in_6 = NULL;
main_AutoColor_2_in_7 = NULL;
main_AutoColor_2_in_8 = NULL;
main_AutoColor_2_in_9 = NULL;
main_AutoColor_2_in_10 = NULL;
main_AutoColor_2_out_1 = NULL;
main_Inquire_10_in_2 = "is vector +1";
main_Inquire_10_in_3 = NULL;
main_Inquire_10_out_1 = NULL;
main_Compute_4_in_1 = "mag($0)";
main_Compute_4_out_1 = NULL;
main_Switch_6_out_1 = NULL;
main_Isosurface_1_in_2 = NULL;
main_Isosurface_1_in_3 = NULL;
main_Isosurface_1_in_4 = NULL;
main_Isosurface_1_in_5 = NULL;
main_Isosurface_1_in_6 = NULL;
main_Isosurface_1_out_1 = NULL;
main_Color_1_in_2 = NULL;
main_Color_1_in_3 = .3;
main_Color_1_in_4 = NULL;
main_Color_1_in_5 = NULL;
main_Color_1_out_1 = NULL;
main_Collect_1_out_1 = NULL;
main_Receiver_5_out_1 = NULL;
main_Inquire_6_in_2 = "is field";
main_Inquire_6_in_3 = NULL;
main_Inquire_6_out_1 = NULL;
main_Inquire_3_in_2 = "is 2D grid connections";
main_Inquire_3_in_3 = NULL;
main_Inquire_3_out_1 = NULL;
main_Inquire_4_in_2 = "is 2D positions";
main_Inquire_4_in_3 = NULL;
main_Inquire_4_out_1 = NULL;
main_Inquire_5_in_2 = "is regular positions";
main_Inquire_5_in_3 = NULL;
main_Inquire_5_out_1 = NULL;
main_Compute_1_in_1 = "$0 && $1 && $2 && $3";
main_Compute_1_out_1 = NULL;
main_Transmitter_3_out_1 = NULL;
main_Receiver_3_out_1 = NULL;
main_Compute_2_in_1 = "$0 + 1";
main_Compute_2_out_1 = NULL;
main_Receiver_6_out_1 = NULL;
main_Inquire_7_in_2 = "is series";
main_Inquire_7_in_3 = NULL;
main_Inquire_7_out_1 = NULL;
main_Transmitter_5_out_1 = NULL;
main_Receiver_7_out_1 = NULL;
main_Compute_3_in_1 = "$0 + 1";
main_Compute_3_out_1 = NULL;
main_Inquire_9_in_2 = "is volume +1";
main_Inquire_9_in_3 = NULL;
main_Inquire_9_out_1 = NULL;
main_Inquire_1_in_2 = "has component + 1";
main_Inquire_1_in_3 = "colors";
main_Inquire_1_out_1 = NULL;
main_Switch_1_out_1 = NULL;
main_Switch_5_out_1 = NULL;
main_Transmitter_1_out_1 = NULL;
main_Receiver_1_out_1 = NULL;
main_Inquire_8_in_2 = "member count - 1";
main_Inquire_8_in_3 = NULL;
main_Inquire_8_out_1 = NULL;
main_Sequencer_1_in_1 = "Sequencer_1";
main_Sequencer_1_in_2 = NULL;
main_Sequencer_1_in_3 = NULL;
main_Sequencer_1_in_4 = 1;
main_Sequencer_1_in_6 = NULL;
main_Sequencer_1_in_7 = { 1 100 1 1 100 1 };
main_Sequencer_1_out_1 = NULL;

@startframe = 1;
@nextframe  = @startframe;
@endframe   = 100;
@deltaframe = 1;
main_Select_2_in_3 = NULL;
main_Select_2_out_1 = NULL;
main_Switch_4_out_1 = NULL;
main_Transmitter_6_out_1 = NULL;
main_Receiver_8_out_1 = NULL;
main_Route_1_out_1 = NULL;
main_Route_1_out_2 = NULL;
main_Display_1_in_2 = NULL;
main_Display_1_in_3 = "X8,,DX Object Viewer";
main_Display_1_in_4 = NULL;
main_Display_1_in_5 = NULL;
main_Display_1_in_6 = NULL;
main_Display_1_in_7 = NULL;
main_Display_1_in_8 = NULL;
main_Reset_1_in_1 = "main_Reset_1_out_1";
main_Reset_1_in_2 = 1;
main_Reset_1_in_3 = 1;
main_Reset_1_in_4 = NULL;
main_Reset_1_in_5 = NULL;
main_Reset_1_in_6 = NULL;
main_Reset_1_out_1[oneshot:0] = 1;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels) -> (
        object,
        camera)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($1 == $2) && ($3 == $4)) ? 2 : 3",
            RECenable,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 3, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_5_in_1 = "Image_5";
main_Image_5_in_3 = "X8,,";
main_Image_5_in_4 = 0;
main_Image_5_in_5 = NULL;
main_Image_5_in_6 = NULL;
main_Image_5_in_7 = NULL;
main_Image_5_in_8 = NULL;
main_Image_5_in_9 = NULL;
main_Image_5_in_10 = NULL;
main_Image_5_in_11 = NULL;
main_Image_5_in_12 = NULL;
main_Image_5_in_13 = NULL;
main_Image_5_in_14 = 1;
main_Image_5_in_15 = NULL;
main_Image_5_in_16 = NULL;
main_Image_5_in_17 = NULL;
main_Image_5_in_18 = NULL;
main_Image_5_in_19 = 0;
main_Image_5_in_20 = NULL;
main_Image_5_in_22 = NULL;
main_Image_5_in_23 = NULL;
main_Image_5_in_25 = NULL;
main_Image_5_in_26 = NULL;
main_Image_5_in_27 = NULL;
main_Image_5_in_28 = NULL;
main_Image_5_in_29 = NULL;
main_Image_5_in_30 = NULL;
main_Image_5_in_31 = NULL;
main_Image_5_in_32 = NULL;
main_Image_5_in_33 = NULL;
main_Image_5_in_34 = NULL;
main_Image_5_in_35 = NULL;
main_Image_5_in_36 = NULL;
main_Image_5_in_37 = NULL;
main_Image_5_in_38 = NULL;
main_Image_5_in_39 = NULL;
main_Image_5_in_40 = NULL;
main_Image_5_in_41 = NULL;
main_Image_5_in_42 = NULL;
main_Image_5_in_43 = NULL;
main_Image_5_in_44 = NULL;
main_Image_5_in_45 = NULL;
main_Image_5_in_46 = NULL;
main_Image_5_in_47 = NULL;
main_Image_5_in_48 = NULL;
Executive("product version 3 2 0");
$sync

sequence main();
play;
