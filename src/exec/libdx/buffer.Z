/***********************************************************************/
/* Open Visualization Data Explorer                                    */
/* (C) Copyright IBM Corp. 1989,1999                                   */
/* ALL RIGHTS RESERVED                                                 */
/* This code licensed under the                                        */
/*    "IBM PUBLIC LICENSE - Open Visualization Data Explorer"          */
/***********************************************************************/

 
INCLUDE2 <dxconfig.h>

INCLUDE2 <string.h>
INCLUDE2 <dx/dx.h>
INCLUDE2 "render.h"
INCLUDE2 "internals.h"
INCLUDE2 "displayutil.h"
 
/*  
 * Rendering buffer
 */ 

Error
_dxf_InitBuffer(struct buffer *b, enum pix_type pix_type,
	    int width, int height, int ox, int oy, RGBColor bkgnd)
{
    register int i, n;
    int init;
    float br, bg, bb;

    init = b->init;
    n = width*height;

    br = bkgnd.r;
    bg = bkgnd.g;
    bb = bkgnd.b;

#   define ALIGN 16
    /* allocate buffer */
    if (pix_type==pix_fast) {
	b->buffer = DXAllocateLocal(n*sizeof(struct fast) + ALIGN);
	if (!b->buffer) {
	    DXResetError();
	    b->buffer = DXAllocate(n*sizeof(struct fast));
	    if (!b->buffer)
		return ERROR;
#if 0
            /* warning about 'frame buffer in global memory' */
	    DXWarning("#4870");
#endif
	}
	b->u.fast = (struct fast *) ((((long)b->buffer)+ALIGN-1) & ~(ALIGN-1));
    } else if (pix_type==pix_big) {
	b->buffer = DXAllocateLocal(n*sizeof(struct big));
	if (!b->buffer) {
	    DXResetError();
	    b->buffer = DXAllocate(n*sizeof(struct big));
	    if (!b->buffer)
		return ERROR;
#if 0
	    DXWarning("#4870");
#endif
	}
	b->u.big = (struct big *) b->buffer;
    } else if (pix_type==pix_zbuf) {
	b->buffer = DXAllocateLocal(n*sizeof(struct zbuf));
	if (!b->buffer) {
	    DXResetError();
	    b->buffer = DXAllocate(n*sizeof(struct zbuf));
	    if (!b->buffer)
		return ERROR;
#if 0
	    DXWarning("#4870");
#endif
	}
	b->u.zbuf = (struct zbuf *) b->buffer;
    }
    b->pix_type = pix_type;

    b->width = width;
    b->height = height;
    b->ox = ox;
    b->oy = oy;
    b->min = DXPt(-ox, -oy, 0);
    b->max = DXPt(width-ox, height-oy, 0);
    b->omin = DXPt(DXD_MAX_FLOAT, DXD_MAX_FLOAT, 0);
    b->omax = DXPt(DXD_MIN_FLOAT, DXD_MIN_FLOAT, 0);

    if (pix_type==pix_fast) {
	struct fast *f;
	for (i=0, f=b->u.fast; i<n; i++, f++) {
	    f->c.r = br;
	    f->c.g = bg;
	    f->c.b = bb;
	    f->z = -DXD_MAX_FLOAT;
	}
    } else if (pix_type==pix_zbuf) {
	struct zbuf *p;
	for (i=0, p=b->u.zbuf; i<n; i++, p++)
	    p->z = -DXD_MAX_FLOAT;
    } else if (init==0) {
	struct big *p;
	for (i=0, p=b->u.big; i<n; i++, p++) {
	    p->c.r = br;
	    p->c.g = bg;
	    p->c.b = bb;
	    p->co.r = 0;
	    p->co.g = 0;
	    p->co.b = 0;
	    p->co.o = 0;
	    p->z = -DXD_MAX_FLOAT;
	    p->front = DXD_MAX_FLOAT;
	    p->back = -DXD_MAX_FLOAT;
	    p->in = 0;
	}
    } else if (init==1) {
	/* NB - buggy at -O on rios */
	static struct big init, *p;
	static RGBColor c = {0, 0, 0};
	static struct rgbo co = {0, 0, 0, 0};
	init.c = c;
	init.co = co;
	init.z = -DXD_MAX_FLOAT;		/* XXX - assumes back to front */
	init.front = DXD_MAX_FLOAT;		/* XXX - no clipping - not needed if */
	init.back = -DXD_MAX_FLOAT;		/* we have non-clipping primitives */
	init.in = 0;
	for (i=0, p=b->u.big; i<n; i++, p++)
	    *p = init;
    } else if (init==2) {
	struct big *p;
	memset(b->u.big, 0, n*sizeof(struct big));
	for (i=0, p=b->u.big; i<n; i++, p++) {
	    p->z = -DXD_MAX_FLOAT;
	    p->front = DXD_MAX_FLOAT;
	    p->back = -DXD_MAX_FLOAT;
	}
    }

    return OK;
}


extern int XImageByteOrder(
#if NeedFunctionPrototypes
   Display*		/* display */
#endif
);

/*
 * XXX - for now, we do nothing at start of clipping; at end
 * of clipping, reinitialize whole clip buffer to most positive z.
 * For better performance, keep track of bounding region of clipping
 * buffer that we use, and only reset that region.
 * XXX - use the same technique to keep track of bounding region
 * for face?
 */

Error
_dxf_BeginClipping(struct buffer *b)
{
    int n, i;
    n = b->width*b->height;
    for (i=0; i<n; i++) {
	b->u.big[i].front = -DXD_MAX_FLOAT;
	b->u.big[i].back = DXD_MAX_FLOAT;
    }
    return OK;
}

Error
_dxfCapClipping(struct buffer *b, float nearPlane)
{
    int n = b->height*b->width;
    struct big *pix= b->u.big;
    while (--n >= 0)
    {
	if (pix->front == pix->back)
	    pix->front = nearPlane;
	pix ++;
    }
    return OK;
}


Error
_dxf_MergeBackIntoZ(struct buffer *b)
{
    int n, i;
    struct big *pix;
    if (b->merged)
	return OK;
    n = b->width*b->height;
    for (i=0, pix=b->u.big; i<n; i++, pix++)
	if (pix->back > pix->z)
	    pix->z = pix->back;
	else
	    pix->back = pix->z;
    b->merged = 1;
    return OK;
}


Error
_dxf_EndClipping(struct buffer *b)
{
    int n, i;
    n = b->width*b->height;
    for (i=0; i<n; i++) {
	b->u.big[i].front = DXD_MAX_FLOAT; /* XXX - no clipping-not needed if */
	b->u.big[i].back = -DXD_MAX_FLOAT; /* we have non-clipping primitives */
    }
    return OK;
}

#define FLOATCONVERT 					\
	t->r = f->c.r, t->g = f->c.g, t->b = f->c.b;

#define UBYTECONVERT 					\
{							\
    t->r = (f->c.r >= 1.0) ? 255 : 			\
	   (f->c.r <= 0.0) ? 0   : 255 * f->c.r;	\
    t->g = (f->c.g >= 1.0) ? 255 : 			\
	   (f->c.g <= 0.0) ? 0   : 255 * f->c.g;	\
    t->b = (f->c.b >= 1.0) ? 255 : 			\
	   (f->c.b <= 0.0) ? 0   : 255 * f->c.b;	\
}
    
#define COPYCOLORS_TOP(srcType, dstType)		\
{							\
    dstType *pixels = (dstType *)DXGetArrayData(a);	\
    dstType *t;						\
    register dstType *tt;				\
    struct srcType *ff;					\
    register struct srcType *f;				\
						        \
    ff = b->u.srcType;					\
    tt = pixels + yoff*iwidth + xoff;			\
    for (y=0; y<bheight; y++) {				\
	for (x=0, f=ff, t=tt; x<bwidth; x++, f++, t++)

#define COPYCOLORS_BOTTOM				\
	ff += bwidth;					\
	tt += iwidth;					\
    }							\
}

#define COPYZ_TOP(srcType)				\
{							\
    float *z_pixels = (float *)DXGetArrayData(a);	\
    float *t;						\
    register float *tt;					\
    struct srcType *ff;					\
    register struct srcType *f;				\
						        \
    ff = b->u.srcType;					\
    tt = z_pixels + yoff*iwidth + xoff;			\
    for (y=0; y<bheight; y++) {				\
	for (x=0, f=ff, t=tt; x<bwidth; x++, f++, t++)

#define COPYZ_BOTTOM					\
	ff += bwidth;					\
	tt += iwidth;					\
    }							\
}

Error
_dxf_CopyBufferToImage(struct buffer *b, Field i, int xoff, int yoff)
{
    int iwidth, bheight=b->height, y;
    register int x, bwidth=b->width;
    Object o;
    Type type;
    Array a;

    o = DXGetComponentAttribute(i, IMAGE, IMAGE_TYPE);

    if (o==O_FB_IMAGE)
	return _dxf_CopyBufferToFBImage(b, i, xoff, yoff);
    else if (o==O_X_IMAGE)
	return _dxf_CopyBufferToPImage(b, i, xoff, yoff);
    else if (o)
	DXErrorReturn(ERROR_BAD_PARAMETER, "#11600");

    if (!DXGetImageSize(i, &iwidth, NULL))
	return ERROR;
    
    a = (Array)DXGetComponentValue(i, COLORS);
    if (! a) 
	return ERROR;
    
    DXGetArrayInfo(a, NULL, &type, NULL, NULL, NULL);

    if (type == TYPE_FLOAT)
    {
	if (b->pix_type == pix_fast)
	{
	    COPYCOLORS_TOP(fast, RGBColor)
	    FLOATCONVERT
	    COPYCOLORS_BOTTOM
	}
	else if (b->pix_type == pix_big)
	{
	    COPYCOLORS_TOP(big, RGBColor)
	    FLOATCONVERT
	    COPYCOLORS_BOTTOM
	}
    }
    else if (type == TYPE_UBYTE)
    {
	if (b->pix_type == pix_fast)
	{
	    COPYCOLORS_TOP(fast, RGBByteColor)
	    UBYTECONVERT
	    COPYCOLORS_BOTTOM
	}
	else if (b->pix_type == pix_big)
	{
	    COPYCOLORS_TOP(big, RGBByteColor)
	    UBYTECONVERT
	    COPYCOLORS_BOTTOM
	}
    }

    a = (Array)DXGetComponentValue(i, "zbuffer");
    if (a) 
    {
	if (b->pix_type == pix_fast)
	{
	    COPYZ_TOP(fast)
	    *t = f->z;
	    COPYZ_BOTTOM
	}
	else if (b->pix_type == pix_big)
	{
	    COPYZ_TOP(big)
	    *t = f->z;
	    COPYZ_BOTTOM
	}
    }

    return OK;
}

/*
 * DXCopy a buffer to an FB (frame buffer) image
 */

Error
_dxf_CopyBufferToFBImage(struct buffer *buf, Field i, int xoff, int yoff)
{
#if DXD_HAS_LIBIOP
    int iwidth, iheight, bheight=buf->height, y;
    register int x, bwidth=buf->width;
    struct fbpixel *pixels, *tt, *t;
    int r, g, b;
    char *conv = (char *)_dxd_convert + UNSIGN(0);

    DXDebug("X", "pre-convert");

    pixels = _dxf_GetFBPixels(i);
    if (!DXGetImageSize(i, &iwidth, &iheight))
	return ERROR;

    if (buf->pix_type==pix_fast) {

	struct fast *ff, *f;

	ff = buf->u.fast;
	tt = pixels + (iheight-yoff-1)*iwidth + xoff;
	for (y=0; y<bheight; y++, ff+=bwidth, tt-=iwidth) {
	    for (x=0, f=ff, t=tt; x<bwidth; x++, f++, t++) {
		r = ((union hl *)&(f->c.r))->hl.hi;
		g = ((union hl *)&(f->c.g))->hl.hi;
		b = ((union hl *)&(f->c.b))->hl.hi;
		r = conv[r];
		g = conv[g];
		b = conv[b];
		t->b = b;
		t->g = g;
		t->r = r;
		t->a = 0xff;
	    }
	}

    } else if (buf->pix_type==pix_big) {

	struct big *ff, *f;

	ff = buf->u.big;
	tt = pixels + (iheight-yoff-1)*iwidth + xoff;
	for (y=0; y<bheight; y++, ff+=bwidth, tt-=iwidth) {
	    for (x=0, f=ff, t=tt; x<bwidth; x++, f++, t++) {
		r = ((union hl *)&(f->c.r))->hl.hi;
		g = ((union hl *)&(f->c.g))->hl.hi;
		b = ((union hl *)&(f->c.b))->hl.hi;
		r = conv[r];
		g = conv[g];
		b = conv[b];
		t->b = b;
		t->g = g;
		t->r = r;
		t->a = 0xff;
	    }
	}

    } else if (buf->pix_type==pix_zbuf) {

	/* nothing to do */

    }

#endif
    return OK;
}


/*
 * DXCopy a buffer to an X image
 */

#define THREEMAPDITHER(type) \
	  d = m[(x+xoff) &(DX-1)]; \
	  *tt = RGBMIX(rtable[DITH(rr,r,d)], \
		       gtable[DITH(gg,g,d)], \
		       btable[DITH(bb,b,d)])

#define THREEMAPNODITHER(type) \
	  *tt =  RGBMIX(rtable[r], \
			gtable[g], \
			btable[b])

#define ONEMAPDITHER(type) \
	  d = m[(x+xoff)&(DX-1)]; \
	  i = MIX(DITH(rr,r,d), DITH(gg,g,d), DITH(bb,b,d)); \
	  *tt = table[i]


#define COPY_LOOP(stype,dtype,function) \
      { \
	struct stype  *ff, *f; \
	dtype         *tt, *t; \
	  \
	f = buf->u.stype; \
	t = (dtype *)pixels + (iheight-yoff-1)*iwidth + xoff; \
	for (y=0; y<bheight; y++, f+=bwidth, t-=iwidth) { \
	    m = &(_dxd_dither_matrix[(y+yoff)&(DY-1)][0]); \
	    for (x=0, ff=f, tt=t; x<bwidth; x++, ff++, tt++) { \
		r = ((union hl *)&(ff->c.r))->hl.hi; \
		g = ((union hl *)&(ff->c.g))->hl.hi; \
		b = ((union hl *)&(ff->c.b))->hl.hi; \
		if (r || g || b) { \
		    r = conv[r]; \
		    g = conv[g]; \
		    b = conv[b]; \
		    function(dtype); \
		} else \
		    *tt = (dtype)t0; \
	    } \
	} \
      }

/*
 * Interference
 */

#define CEIL(x) ((int)((x)-30000.0)+30000)

/*
 * DXCopy a face from ->co buffer to ->c buffer, only where
 * parity (->in) and z (XXX ->co.o and ->z) allow, and zero ->in.
 * XXX - move this to buffer.c? 
 */

Error
_dxf_CopyFace(struct buffer *b, int if_object)
{
    int i, j, x, y, nx, ny;
    struct big *pix, *p;

    /* test avoids overflow in fp to int conversion if no faces! */
    if (b->fmax.x<b->fmin.x || b->fmax.y<b->fmin.y)
	return OK;

    /* bounds */
    x = (int)b->fmin.x;
    y = (int)b->fmin.y;
    nx = (int)b->fmax.x - x + 1;
    ny = (int)b->fmax.y - y + 1;

    /* clip XXX - test */
    if (x < 0) nx+=x, x=0;
    if (x+nx >= b->width) nx = b->width-x;
    if (y < 0) ny+=y, y=0;
    if (y+ny >= b->height) ny = b->height-y;

    /* interference bit */
    if (if_object) if_object = IF_OBJECT;

    /* copy pixels */
    pix = b->u.big + y*b->width;
    for (i=0; i<ny; i++, pix+=b->width) {
	for (j=0, p=pix+x; j<nx; j++, p++) {
	    int in = p->in;
	    if (in & IN_FACE) {
		/* reuse co.o for z here XXX - use union? */
		if (p->co.o>p->z && p->co.o<p->front && p->co.o>p->back) {
		    p->c.r=p->co.r;
		    p->c.g=p->co.g;
		    p->c.b=p->co.b;
		    p->z=p->co.o;
		}
		in &= ~IN_FACE;
		in ^= if_object;
		p->in = in;
	    }
	}
    }

    return OK;
}

Error
_dxf_InterferenceObject(struct buffer *buf)
{
    int xmin, xmax, ymin, ymax, x, y;
    int width = buf->width, height = buf->height;
    struct big *pp, *p;

    xmin = CEIL(buf->omin.x);
    ymin = CEIL(buf->omin.y);
    xmax = CEIL(buf->omax.x);
    ymax = CEIL(buf->omax.y);

    if (xmin<0) xmin = 0; else if (xmin>=width) xmin = width;
    if (xmax<0) xmax = 0; else if (xmax>=width) xmax = width;
    if (ymin<0) ymin = 0; else if (ymin>=height) ymin = height;
    if (ymax<0) ymax = 0; else if (ymax>=height) ymax = height;

    for (y=ymin, pp=buf->u.big+y*width; y<ymax; y++, pp+=width) {
	for (x=xmin, p=pp+xmin; x<xmax; x++, p++) {
	    int in = p->in;
	    if (in & IF_OBJECT) {
		if (in & IF_UNION)
		    in |= IF_INTERSECTION;
		in |= IF_UNION;
		in &= ~IF_OBJECT;
		p->in = in;
	    }
	}
    }

    return OK;
}

#define IMAGE_8BIT	"8bit"
#define IMAGE_12BIT	"12bit"
#define IMAGE_24BIT	"24bit"
#define IMAGE_32BIT	"32bit"
#define IMAGE_RGBCOLOR	"RGBColor"


#define DECODE								$\
static Field DECODE_NAME(Array encodedImage)				$\
{									$\
    Field pixField = NULL;						$\
    Array a = NULL;							$\
    int   i, j, image_size, flag, knt;					$\
    ubyte *ptr = (ubyte *)DXGetArrayData(encodedImage);			$\
    int *res, x, y;							$\
    ubyte *pix;								$\
									$\
    a = (Array)DXGetAttribute((Object)encodedImage, "resolution");	$\
    if (! a)								$\
    {									$\
	DXSetError(ERROR_INTERNAL,					$\
		"cached image missing resolution attrbute");		$\
	goto error;							$\
    }									$\
									$\
    res = DXGetArrayData(a);						$\
    x = res[0]; y = res[1];						$\
									$\
    pixField = DXNewField();						$\
    if (! pixField)							$\
	goto error;							$\
									$\
    a = DXMakeGridPositions(2, x, y, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0);	$\
    if (! a)								$\
	goto error;							$\
									$\
    if (! DXSetComponentValue(pixField, POSITIONS, (Object)a))		$\
	goto error;							$\
									$\
    a = DXMakeGridConnections(2, x, y);					$\
    if (! a)								$\
	goto error;							$\
    if (! DXSetConnections(pixField, "quads", a))			$\
	goto error;							$\
									$\
    a = DXNewArray(DX_TYPE, CATEGORY_REAL, DX_RANK, DX_VECLEN);		$\
    if (! a)								$\
	goto error;							$\
    if (! DXAddArrayData(a, 0, x*y, NULL))				$\
	goto error;							$\
    if (! DXSetAttribute((Object)a, ENCODING_TYPE, O_X_IMAGE))		$\
	goto error;							$\
									$\
    pix = (ubyte *)DXGetArrayData(a);					$\
									$\
    image_size = x*y;							$\
									$\
    for (i = 0; i != image_size; i += knt)				$\
    {									$\
	flag = *ptr & 0x80;						$\
	knt  = *ptr & 0x7f;						$\
									$\
	ptr ++;								$\
									$\
	if (flag)							$\
	{								$\
	    memcpy((char *)pix, (char *)ptr, PIXSIZE*knt);		$\
	    ASGN(pix, ptr);						$\
	    pix += knt*PIXSIZE;						$\
	    ptr += knt*PIXSIZE;						$\
	} else {							$\
	    C_TYPE proto;						$\
	    ASGN(&proto, ptr);						$\
	    for (j = 0; j < knt; j++)					$\
	    {								$\
		*(C_TYPE *)pix = proto;					$\
		pix += PIXSIZE;						$\
	    }								$\
	    								$\
	    ptr += PIXSIZE;						$\
	}								$\
    }									$\
									$\
    if (! DXSetComponentValue(pixField, IMAGE, (Object)a))		$\
	goto error;							$\
									$\
    return DXEndField(pixField);					$\
									$\
error:									$\
    DXFree((Object)pixField);						$\
    DXFree((Object)a);							$\
									$\
    return NULL;							$\
}

#define MAKE_ROOM							\
    if (segknt == 0) {							\
	seg = DXNewSegListSegment(seglist,1024);			\
	if (! seg) goto error;						\
	segptr = DXGetSegListSegmentPointer(seg);			\
	if (! segptr) goto error;					\
	segknt = 1024;							\
    }

#define ENCODE								$\
static Array ENCODE_NAME(Field image, translationP t)			$\
{									$\
    ubyte *start_p, *p;							$\
    int    start_i,  i, knt, size;					$\
    int x, y;								$\
    Array a = NULL;							$\
    Object attr = NULL;							$\
    int image_size, res[2], nd;						$\
    int segknt, totknt;							$\
    SegListSegment *seg;						$\
    SegList *seglist = NULL;						$\
    ubyte *segptr=NULL;							$\
    int mask = COLORMASK;                                               $\
									$\
    a = (Array)DXGetComponentValue(image, "connections");		$\
    if (! a)								$\
    {									$\
	DXSetError(ERROR_INTERNAL, "image missing connections");	$\
	return NULL;							$\
    }									$\
									$\
    if (!DXQueryGridConnections(a, &nd, res) || nd != 2)		$\
    {									$\
	DXSetError(ERROR_INTERNAL, "invalid image");			$\
	return NULL;							$\
    }									$\
									$\
    x = res[0];								$\
    y = res[1];								$\
    image_size = x*y;							$\
									$\
    seglist = DXNewSegList(sizeof(ubyte), 0, 0);			$\
    if (! seglist)							$\
	goto error;							$\
									$\
    segknt = 0;								$\
    totknt = 0;								$\
    									$\
    a = (Array)DXGetComponentValue(image, IMAGE);			$\
    if (! a)								$\
    {									$\
	DXSetError(ERROR_INTERNAL, "invalid image");			$\
	return NULL;							$\
    }									$\
									$\
    start_i = 0;							$\
    start_p = (ubyte *)DXGetArrayData(a);				$\
    a = NULL;								$\
									$\
    while (start_i < image_size)					$\
    {									$\
	/*								$\
	 * Look for run of identical pixels				$\
	 */								$\
	i = start_i + 1;						$\
	p = start_p + PIXSIZE;						$\
									$\
	while (i < image_size)						$\
	{								$\
	    if (! CMP(start_p, p))					$\
		break;							$\
									$\
	    i++;							$\
	    p += PIXSIZE;						$\
	}								$\
									$\
	knt = i - start_i;						$\
									$\
	/*								$\
	 * if knt == 1 then two adjacent pixels differ.  so instead we	$\
	 * look for a run of differing pixels, broken when three	$\
	 * identical pixels are found.					$\
	 */								$\
	if (knt == 1)							$\
	{								$\
	    /*								$\
	     * terminate this loop before the comparison goes off	$\
	     * the end of the image.					$\
	     */								$\
	    while ((!CMP(p+0, p+PIXSIZE) ||				$\
		    !CMP(p+0, p+2*PIXSIZE)) && i < image_size - 2)	$\
		i++, p += PIXSIZE;					$\
	    								$\
	    /*								$\
	     * Don't bother with rle for last couple of pixels		$\
	     */								$\
	    if (i == image_size-2)					$\
		i = image_size;						$\
	    								$\
	    knt = i - start_i;						$\
									$\
	    /*								$\
	     * loop parcelling out total run in as many packets 	$\
	     * as are necessary						$\
	     */								$\
	    while (knt > 0)						$\
	    {								$\
		/*							$\
		 * Limit run length to packet size			$\
		 */							$\
		int length = (knt > 127) ? 127 : knt;			$\
		int size = length * PIXSIZE;				$\
									$\
		/*							$\
		 * decrement total run length by packet run length	$\
		 */							$\
		knt -= length;						$\
									$\
		/* 							$\
		 * we're going to add length pixels plus 1 byte header	$\
		 * to output						$\
		 */							$\
		totknt += (size + 1);					$\
									$\
		MAKE_ROOM;						$\
									$\
		*segptr++ = 0x80 | length;				$\
		segknt --;						$\
									$\
		/*							$\
		 * packet may be divided into more than one segments	$\
		 */							$\
		while (size > 0)					$\
		{							$\
		    int l;						$\
									$\
		    MAKE_ROOM;						$\
									$\
		    l = (size > segknt) ? segknt : size;		$\
									$\
		    memcpy(segptr, start_p, l);				$\
		    segptr  += l;					$\
		    size    -= l;					$\
		    start_p += l;					$\
		    segknt  -= l;					$\
		}							$\
	    }								$\
	}								$\
	else								$\
	{								$\
									$\
	    while (knt > 0)						$\
	    {								$\
		/*							$\
		 * Limit run length to packet size			$\
		 */							$\
		int length = (knt > 127) ? 127 : knt;			$\
									$\
		/*							$\
		 * decrement total run length by packet run length	$\
		 */							$\
		knt -= length;						$\
									$\
		MAKE_ROOM;						$\
		*segptr++ = length;					$\
		segknt--;						$\
									$\
		size = PIXSIZE;						$\
		totknt += size + 1;					$\
									$\
		while (size > 0)					$\
		{							$\
		    int l;						$\
									$\
		    MAKE_ROOM;						$\
									$\
		    l = (size > segknt) ? segknt : size;		$\
									$\
		    memcpy(segptr, start_p, l);				$\
		    segptr  += l;					$\
		    size    -= l;					$\
		    start_p += l;					$\
		    segknt  -= l;					$\
		}							$\
									$\
	    }								$\
	}								$\
									$\
	start_i = i;							$\
	start_p = p;							$\
    }									$\
									$\
    DXDebug("Y", "compaction: %d bytes in %d bytes out", 		$\
				image_size*PIXSIZE, totknt);		$\
									$\
    a = DXNewArray(TYPE_UBYTE, CATEGORY_REAL, 1, sizeof(ubyte));	$\
    if (! a)								$\
	 goto error;							$\
									$\
    if (! DXAddArrayData(a, 0, totknt, NULL))				$\
	goto error;							$\
									$\
    start_p = (ubyte *)DXGetArrayData(a);				$\
									$\
    DXInitGetNextSegListSegment(seglist);				$\
    while (totknt > 0)							$\
    {									$\
	int s, l;							$\
	seg = DXGetNextSegListSegment(seglist);				$\
	if (! seg)							$\
	{								$\
	    DXSetError(ERROR_INTERNAL, "run_length encoding error");	$\
	    goto error;							$\
	}								$\
									$\
	s = DXGetSegListSegmentItemCount(seg) * sizeof(ubyte);		$\
	if (totknt > s)							$\
	    l = s;							$\
	else								$\
	    l = totknt;							$\
									$\
	memcpy(start_p, DXGetSegListSegmentPointer(seg), l);		$\
									$\
	start_p += l;							$\
	totknt -= l;							$\
    }									$\
									$\
    res[0] = x;								$\
    res[1] = y;								$\
									$\
    attr = (Object)DXNewArray(TYPE_INT, CATEGORY_REAL, 0);		$\
    if (! attr)								$\
	goto error;							$\
									$\
    if (! DXAddArrayData((Array)attr, 0, 2, (Pointer)res))		$\
	goto error;							$\
									$\
    if (! DXSetAttribute((Object)a, "resolution", attr))		$\
	goto error;							$\
    attr = NULL;							$\
									$\
    if (! DXSetAttribute((Object)a, "encoding type",			$\
				    (Object)DXNewString(ENCODING_TYPE)))$\
	goto error;							$\
    									$\
    DXDeleteSegList(seglist);						$\
    return a;								$\
									$\
error:									$\
    DXDeleteSegList(seglist);						$\
    DXDelete((Object)a);						$\
									$\
    return ERROR;							$\
}

#define COLORMASK	0
#define CMP(A,B)  	(*((ubyte *)(A)) == *((ubyte *)(B)))
#define ASGN(A,B) 	(*((ubyte *)(A)) = *((ubyte *)(B)))
#define PIXSIZE	  	sizeof(ubyte)
#define ENCODING_TYPE	IMAGE_8BIT
#define DX_TYPE		TYPE_UBYTE
#define C_TYPE 		ubyte
#define DX_RANK		0
#define DX_VECLEN	1
#define DECODE_NAME     decode_8bit
#define ENCODE_NAME     encode_8bit
DECODE
ENCODE
#undef CMP
#undef ASGN
#undef ENCODING_TYPE
#undef PIXSIZE
#undef DX_TYPE
#undef C_TYPE
#undef DX_RANK
#undef DX_VECLEN
#undef DECODE_NAME
#undef ENCODE_NAME
#undef COLORMASK

#define COLORMASK COLORMASK12 
#define CMP(A,B)  	(!((*((ushort *)(A)) ^ *((ushort *)(B))) & COLORMASK))
#define ASGN(A,B)	(((char *)(A))[0] = ((char *)(B))[0], \
			 ((char *)(A))[1] = ((char *)(B))[1])
#define PIXSIZE	  	sizeof(ushort)
#define ENCODING_TYPE	IMAGE_12BIT
#define DX_TYPE		TYPE_USHORT
#define C_TYPE 		ushort
#define DX_RANK		0
#define DX_VECLEN	1
#define DECODE_NAME     decode_12bit
#define ENCODE_NAME     encode_12bit
DECODE
ENCODE
#undef CMP
#undef COLORMASK
#undef ASGN
#undef ENCODING_TYPE
#undef PIXSIZE
#undef C_TYPE
#undef DX_TYPE
#undef DX_RANK
#undef DX_VECLEN
#undef DECODE_NAME
#undef ENCODE_NAME
#undef COLORMASK

#define COLORMASK COLORMASK24
#define CMP(A,B)  	(!((*((uint *)(A)) ^ *((uint *)(B))) & mask))
#define ASGN(A,B)	(((char *)(A))[0] = ((char *)(B))[0], \
			 ((char *)(A))[1] = ((char *)(B))[1], \
			 ((char *)(A))[2] = ((char *)(B))[2], \
			 ((char *)(A))[3] = ((char *)(B))[3])
#define PIXSIZE	  	sizeof(int32)
#define ENCODING_TYPE	IMAGE_24BIT
#define DX_TYPE		TYPE_UINT
#define C_TYPE 		uint
#define DX_RANK		0
#define DX_VECLEN	1
#define DECODE_NAME     decode_24bit
#define ENCODE_NAME     encode_24bit
DECODE
ENCODE
#undef CMP
#undef MASK
#undef ASGN
#undef ENCODING_TYPE
#undef PIXSIZE
#undef C_TYPE
#undef DX_TYPE
#undef DX_RANK
#undef DX_VECLEN
#undef DECODE_NAME
#undef ENCODE_NAME
#undef COLORMASK

#define COLORMASK 0
#define CMP(A,B)  	(*((uint *)(A)) == *((uint *)(B)))
#define ASGN(A,B)	(((char *)(A))[0] = ((char *)(B))[0], \
			 ((char *)(A))[1] = ((char *)(B))[1], \
			 ((char *)(A))[2] = ((char *)(B))[2], \
			 ((char *)(A))[3] = ((char *)(B))[3])
#define PIXSIZE	  	sizeof(int32)
#define ENCODING_TYPE	IMAGE_32BIT
#define DX_TYPE		TYPE_UBYTE
#define C_TYPE 		uint
#define DX_RANK		1
#define DX_VECLEN	4
#define DECODE_NAME     decode_32bit
#define ENCODE_NAME     encode_32bit
DECODE
ENCODE
#undef CMP
#undef ASGN
#undef ENCODING_TYPE
#undef PIXSIZE
#undef C_TYPE
#undef DX_TYPE
#undef DX_RANK
#undef DX_VECLEN
#undef DECODE_NAME
#undef ENCODE_NAME
#undef COLORMASK

#define COLORMASK 0
#define CMP(A,B) \
    ((((RGBColor *)(A))->r == ((RGBColor *)(B))->r) &&			\
     (((RGBColor *)(A))->g == ((RGBColor *)(B))->g) &&			\
     (((RGBColor *)(A))->b == ((RGBColor *)(B))->b))
#define ASGN(A,B) 	memcpy((char *)(A), (char *)(B), sizeof(RGBColor))
#define PIXSIZE	  	sizeof(RGBColor)
#define DX_TYPE		TYPE_FLOAT
#define C_TYPE 		RGBColor
#define DX_RANK		0
#define DX_VECLEN	3
#define ENCODING_TYPE	IMAGE_RGBCOLOR
#define DECODE_NAME     decode_RGBColor
#define ENCODE_NAME     encode_RGBColor
DECODE
ENCODE
#undef CMP
#undef ASGN
#undef ENCODING_TYPE
#undef PIXSIZE
#undef DX_TYPE
#undef C_TYPE
#undef DX_RANK
#undef DX_VECLEN
#undef DECODE_NAME
#undef ENCODE_NAME
#undef COLORMASK

Object
_dxf_EncodeImage(Field image)
{
    Type t; Category c;
    int r, s;
    Object attr;
    Object encodedimage = NULL;
    Object o = DXGetComponentAttribute(image, IMAGE, X_SERVER);	
    translationP translation = NULL;
    Array a = (Array)DXGetComponentValue(image, IMAGE);
    if (! a)
    {
	DXSetError(ERROR_INTERNAL, "invalid image field");
	return NULL;
    }

    if (o)
	translation = _dxf_GetXTranslation(o);	

    DXMarkTime("encode start");

    if (! DXGetArrayInfo(a, NULL, &t, &c, &r, &s))
	return NULL;

    if (t == TYPE_UBYTE && (r == 0 || (r == 1 && s == 1)))
	encodedimage = (Object)encode_8bit(image, translation);
    else if (t == TYPE_USHORT && (r == 0 || (r == 1 && s == 1)))
	encodedimage = (Object)encode_12bit(image, translation);
    else if (t == TYPE_UINT && (r == 0 || (r == 1 && s == 1)))
	encodedimage = (Object)encode_24bit(image, translation);
    else if (t == TYPE_UBYTE && r == 1 && s == 4)
	encodedimage = (Object)encode_32bit(image, translation);
    else if (t == TYPE_FLOAT && (r == 1 && s == 3))
	encodedimage = (Object)encode_RGBColor(image, translation);
    else
	encodedimage = DXCopy((Object)image, COPY_STRUCTURE);

    if (!encodedimage)
	return NULL;
    
    if (! DXSetIntegerAttribute(encodedimage, "image tag",
					(int)DXGetObjectTag((Object)image)))
    {
	DXDelete(encodedimage);
	return NULL;
    }

    attr = DXGetAttribute((Object)image, "camera");
    if (attr)
	if (! DXSetAttribute(encodedimage, "camera", attr))
	{
	    DXDelete(encodedimage);
	    return NULL;
	}

    attr = DXGetAttribute((Object)image, "object box");
    if (attr)
	if (! DXSetAttribute(encodedimage, "object box", attr))
	{
	    DXDelete(encodedimage);
	    return NULL;
	}

    attr = DXGetComponentAttribute(image, IMAGE, IMAGE_TYPE);
    if (attr)
	if (! DXSetAttribute(encodedimage, IMAGE_TYPE, attr))
	{
	    DXDelete(encodedimage);
	    return NULL;
	}

    attr = DXGetAttribute((Object)image, X_SERVER);
    if (attr)
	if (! DXSetAttribute(encodedimage, X_SERVER, attr))
	{
	    DXDelete(encodedimage);
	    return NULL;
	}

    DXMarkTime("encode end");

    return encodedimage;
}

Field
_dxf_DecodeImage(Object encodedimage)
{
    Field image;
    char *str;
    Object attr;
    
    attr = DXGetAttribute((Object)encodedimage, "encoding type");
    if (! attr)
    {
	if (DXGetObjectClass(encodedimage) != CLASS_FIELD)
	{
	    DXSetError(ERROR_DATA_INVALID, "invalid image");
	    return NULL;
	}

	image = (Field)DXCopy(encodedimage, COPY_STRUCTURE);
    }
    else
    {
	if (DXGetObjectClass(encodedimage) != CLASS_ARRAY)
	{
	    DXSetError(ERROR_DATA_INVALID, "invalid encoded image");
	    return NULL;
	}

	if (DXGetObjectClass(attr) != CLASS_STRING)
	{
	    DXSetError(ERROR_INTERNAL, "invalid encoded image");
	    return NULL;
	}

	str = DXGetString((String)attr);

	DXMarkTime("decode start");


	if (! strcmp(str, IMAGE_8BIT))
	    image = decode_8bit((Array)encodedimage);
	else if (! strcmp(str, IMAGE_12BIT))
	    image = decode_12bit((Array)encodedimage);
	else if (! strcmp(str, IMAGE_24BIT))
	    image = decode_24bit((Array)encodedimage);
	else if (! strcmp(str, IMAGE_32BIT))
	    image = decode_32bit((Array)encodedimage);
	else if (! strcmp(str, IMAGE_RGBCOLOR))
	    image = decode_RGBColor((Array)encodedimage);
	else
	{
	    DXSetError(ERROR_INTERNAL, "invalid encoded image");
	    return NULL;
	}

	attr = DXGetAttribute(encodedimage, "image tag");
	if (! attr)
	{
	    DXSetError(ERROR_INTERNAL, "missing image tag");
	    DXDelete((Object)image);
	    return NULL;
	}

	if (! DXSetAttribute((Object)image, "image tag", attr))
	{
	    DXDelete((Object)image);
	    return NULL;
	}

	attr = DXGetAttribute(encodedimage, "camera");
	if (attr)
	    if (! DXSetAttribute((Object)image, "camera", attr))
	    {
		DXDelete((Object)image);
		return NULL;
	    }

	attr = DXGetAttribute(encodedimage, "object box");
	if (attr)
	    if (! DXSetAttribute((Object)image, "object box", attr))
	    {
		DXDelete((Object)image);
		return NULL;
	    }

	if (NULL != (attr = DXGetAttribute(encodedimage, IMAGE_TYPE)))
	    if (! DXSetComponentAttribute(image, IMAGE, IMAGE_TYPE, attr))
	    {
		DXDelete((Object)image);
		return NULL;
	    }

	if (NULL != (attr = DXGetAttribute(encodedimage, X_SERVER)))
	    if (! DXSetAttribute((Object)image, X_SERVER, attr))
	    {
		DXDelete((Object)image);
		return NULL;
	    }
    }

    DXMarkTime("decode end");

    return image;
}
